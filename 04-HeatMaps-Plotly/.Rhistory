cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
churn$TotalCharges <- NULL
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
tree <- ctree(Churn~Contract+tenure_group+PaperlessBilling, training)
plot(tree, type='simple')
pred_tree <- predict(tree, testing)
print("Confusion Matrix for Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
p1 <- predict(tree, training)
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))
set.seed(2017)
rfModel <- randomForest(Churn ~., data = training)
print(rfModel)
pred_rf <- predict(rfModel, testing)
caret::confusionMatrix(pred_rf, testing$Churn)
plot(rfModel)
t <- tuneRF(training[, -18], training[, 18], stepFactor = 0.5, plot = TRUE, ntreeTry = 200, trace = TRUE, improve = 0.05)
rfModel_new <- randomForest(Churn ~., data = training, ntree = 200, mtry = 2, importance = TRUE, proximity = TRUE)
print(rfModel_new)
pred_rf_new <- predict(rfModel_new, testing)
caret::confusionMatrix(pred_rf_new, testing$Churn)
varImpPlot(rfModel_new, sort=T, n.var = 10, main = 'Top 10 Feature Importance')
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/04")
# Def dir
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/04")
getwd()
library(RColorBrewer)
vendas <- read.csv("vendas.csv")
head(vendas)
rownames(vendas) <- vendas[,1]
vendas <- vendas[,-1]
data_matrix <- data.matrix(vendas)
head(vendas)
# Paleta de cores e tamanho dos bins (retângulos) ------------------------------
pal = brewer.pal(7,"YlOrRd")
breaks <- seq(3000,12000,1500)
layout(matrix(data = c(1,2), nrow = 1, ncol = 2), widths = c(8,1), heights = c(1,1))
par(mar = c(5,10,4,2), oma = c(0.2,0.2,0.2,0.2), mex = 0.5)
image(x = 1:nrow(data_matrix), y = 1:ncol(data_matrix),
z = data_matrix,
axes = FALSE,
xlab = "Mês",
ylab = "",
col = pal[1:(length(breaks)-1)],
breaks = breaks,
main = "Heat Map de Vendas")
axis(1, at=1:nrow(data_matrix), labels = rownames(data_matrix), col = "white", las = 1)
axis(2, at=1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1)
# Adiciona linhas divisórias
abline(h=c(1:ncol(data_matrix))+0.5,
v=c(1:nrow(data_matrix))+0.5, col="white",lwd=2,xpd=FALSE)
breaks2 <- breaks[-length(breaks)]
par(mar = c(5,1,4,7))
image(x=1, y=0:length(breaks2),z=t(matrix(breaks2))*1.001,
col=pal[1:length(breaks)-1],
axes=FALSE,
breaks = breaks,
xlab = "",
ylab = "",
xaxt = "n")
axis(4, at=0:(length(breaks2)-1), labels = breaks2, col = "white", las = 1)
abline(h = c(1:length(breaks2)), col = "white", lwd = 2, xpd = F)
genes <- read.csv("genes.csv")
head(genes)
rownames(genes) <- genes[,1]
data_matrix <- data.matrix(genes[,-1])
head(genes)
pal = heat.colors(5)
breaks <- seq(0,1,0.2)
layout(matrix(data = c(1,2), nrow = 1, ncol = 2), widths = c(8,1), heights = c(1,1))
par(mar = c(3,7,12,2), oma = c(0.2,0.2,0.2,0.2), mex = 0.5)
image(x=1:nrow(data_matrix),y=1:ncol(data_matrix),
z = data_matrix,
xlab = "",
ylab = "",
breaks = breaks,
col = pal,
axes = FALSE)
text(x=1:nrow(data_matrix)+0.75, y=par("usr")[4] + 1.25,
srt = 45, adj = 1, labels = rownames(data_matrix), xpd = TRUE)
axis(2,at=1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1)
abline(h = c(1:ncol(data_matrix))+0.5, v = c(1:nrow(data_matrix))+0.5, col = "white", lwd = 2, xpd = F)
title("Correlação Entre Genes", line = 8, adj = 0)
nba <- read.csv("nba.csv")
head(nba)
library(RColorBrewer)
rownames(nba) <- nba[,1]
data_matrix <- t(scale(data.matrix(nba[,-1])))
head(nba)
pal = brewer.pal(6,"Blues")
statnames <- c("Games Played", "Minutes Played", "Total Points", "Field Goals Made", "Field Goals Attempted", "Field Goal Percentage", "Free Throws Made", "Free Throws Attempted", "Free Throw Percentage", "Three Pointers Made", "Three Pointers Attempted", "Three Point Percentage", "Offensive Rebounds", "Defensive Rebounds", "Total Rebounds", "Assists", "Steals", "Blocks", "Turnovers", "Fouls")
statnames <- c("Games Played", "Minutes Played", "Total Points", "Field Goals Made",
"Field Goals Attempted", "Field Goal Percentage", "Free Throws Made",
"Free Throws Attempted", "Free Throw Percentage", "Three Pointers Made",
"Three Pointers Attempted", "Three Point Percentage", "Offensive Rebounds",
"Defensive Rebounds", "Total Rebounds", "Assists", "Steals", "Blocks", "Turnovers", "Fouls")
par(mar = c(3,14,19,2), oma=c(0.2,0.2,0.2,0.2), mex=0.5)
image(x = 1:nrow(data_matrix),
y = 1:ncol(data_matrix),
z = data_matrix,
xlab = "",
ylab = "",
col = pal,
axes = FALSE)
text(1:nrow(data_matrix), par("usr")[4] + 1, srt = 45, adj = 0, labels = statnames, xpd = TRUE, cex = 0.85)
axis(side=2, at = 1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1, cex.axis = 0.85)
abline(h = c(1:ncol(data_matrix))+0.5, v=c(1:nrow(data_matrix))+0.5, col = "white", lwd = 1, xpd = F)
text(par("usr")[1]+5, par("usr")[4] + 12, "Performance por Jogo dos 50 Melhores Atletas da NBA", xpd = TRUE, font = 2, cex = 1.5)
contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
??countour
?volcano
contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
# fç + as infos do dataset:
contour(x = 5*1:nrow(volcano),
y = 5*1:ncol(volcano),
z = volcano,
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
# fç + as infos do dataset:
contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
par(las = 1)
plot(0,0,
xlim = c(0,10*nrow(volcano)),
ylim = c(0,10*ncol(volcano)),
type = "n",
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
# Ajustando a área de plotagem e alterando a cor de fundo
u <- par("usr")
rect(u[1],u[3],u[2],u[4], col = "lightgreen")
# Criando o gráfico
contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
volcano,
col = "red",
add = TRUE)
# Preenchendo o Countour Plot --------- (filled contour plots) --------- heatmap
filled.contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
color.palette = terrain.colors,
plot.title = title(main = "Topografia do Vulcão Maunga Whau", xlab = "Metros ao Norte", ylab = "Metros a Oeste"),
plot.axes = {axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100))},
key.title = title(main="Altura\n(metros)"),
key.axes = axis(4, seq(90, 190, by = 10)))
# Preenchendo o Countour Plot (filled contour plots) e aumentando o nível de detalhes
filled.contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
color.palette = terrain.colors,
plot.title = title(main = "Topografia do Vulcão Maunga Whau", xlab = "Metros ao Norte", ylab = "Metros a Oeste"),
nlevels = 100,
plot.axes = {axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100))},
key.title = title(main = "Altura\n(metros)"),
key.axes = axis(4, seq(90, 190, by = 10)))
install.packages("rgl")
library(rgl)
z <- 2 * volcano
x <- 10 * (1:nrow(z))
y <- 10 * (1:ncol(z))
zlim <- range(z)
zlen <- zlim[2] - zlim[1] + 1
colorlut <- terrain.colors(zlen)
col <- colorlut[ z-zlim[1]+1 ]
rgl.open()
rgl.surface(x, y, z, color = col, back = "lines")
source("calendarHeat.R")
stock.data <- read.csv("google.csv")
library(chron)
calendarHeat(dates = stock.data$Date, values = stock.data$Adj.Close, varname = "Google Adjusted Close")
library(openair)
calendarPlot(mydata) # gerando um plot com mydata (dataset q vem com o pacote)
mydata$sales <- rnorm(length(mydata$nox), mean = 1000, sd = 1500)
calendarPlot(mydata, pollutant = "sales", main = "Vendas Diárias em 2003")
################################################################################
############################# Heat Maps ########################################
# Base Plotting System
# Apresentar um resumo do processo de análise.
# Def dir
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/04")
getwd()
# Pacote -----------------------------------------------------------------------
install.packages("RColorBrewer")
library(RColorBrewer) # paletas de cores
# Carregando os dados
vendas <- read.csv("vendas.csv")
head(vendas)
# Preparando os dados - Reshape dos dados (transf col e ÍNDICE) ---------------
rownames(vendas) <- vendas[,1]
vendas <- vendas[,-1]
data_matrix <- data.matrix(vendas)
head(vendas)
# Paleta de cores e tamanho dos bins (retângulos) ------------------------------
pal = brewer.pal(7,"YlOrRd")
breaks <- seq(3000,12000,1500) #caixinhas do heatmap
# Cria layout com 1 linha e 2 colunas (para o heatmap e escala); ---------------
# A coluna heatmap é 8 vezes maior que a coluna da escala
?layout
layout(matrix(data = c(1,2), nrow = 1, ncol = 2), widths = c(8,1), heights = c(1,1))
# Escolha margens para o heat map (parametros) ---------------------------------
par(mar = c(5,10,4,2), oma = c(0.2,0.2,0.2,0.2), mex = 0.5)
# Cria o gráfico (padrão do R) -------------------------------------------------
?image
image(x = 1:nrow(data_matrix), y = 1:ncol(data_matrix),
z = data_matrix,
axes = FALSE,
xlab = "Mês",
ylab = "",
col = pal[1:(length(breaks)-1)],
breaks = breaks,
main = "Heat Map de Vendas")
# Adiciona labels ao eixo x
axis(1, at=1:nrow(data_matrix), labels = rownames(data_matrix), col = "white", las = 1)
# Adiciona labels ao eixo y
axis(2, at=1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1)
# Adiciona linhas divisórias
abline(h=c(1:ncol(data_matrix))+0.5,
v=c(1:nrow(data_matrix))+0.5, col="white",lwd=2,xpd=FALSE)
# Adicionando breaks para usar como esacala ------ Legenda ---------------------
breaks2 <- breaks[-length(breaks)]
# Color Scale (legenda)
par(mar = c(5,1,4,7))
# Se você obtiver um erro de margens de figura ao executar o código acima, amplie o dispositivo de plotagem ou
# ajuste as margens para que o gráfico e a escala se encaixem no dispositivo. (legenda)
image(x=1, y=0:length(breaks2),z=t(matrix(breaks2))*1.001,
col=pal[1:length(breaks)-1],
axes=FALSE,
breaks = breaks,
xlab = "",
ylab = "",
xaxt = "n")
# Labels e linhas divisórias (legenda)
axis(4, at=0:(length(breaks2)-1), labels = breaks2, col = "white", las = 1)
abline(h = c(1:length(breaks2)), col = "white", lwd = 2, xpd = F)
################################################################################
######################## Correlation Heat Maps #################################
# Carrega os dados
genes <- read.csv("genes.csv")
head(genes)
# Prepara os dados - --------------------Reshape--------------------------------
rownames(genes) <- genes[,1]
data_matrix <- data.matrix(genes[,-1])
head(genes)
# Cores e breaks -------------------- caixinhas das cores ----------------------
pal = heat.colors(5)
breaks <- seq(0,1,0.2)
# Layout
layout(matrix(data = c(1,2), nrow = 1, ncol = 2), widths = c(8,1), heights = c(1,1))
par(mar = c(3,7,12,2), oma = c(0.2,0.2,0.2,0.2), mex = 0.5)
# Cria o gráfico ------------------------------------plot-----------------------
image(x=1:nrow(data_matrix),y=1:ncol(data_matrix),
z = data_matrix,
xlab = "",
ylab = "",
breaks = breaks,
col = pal,
axes = FALSE)
# Adiciona texto
text(x=1:nrow(data_matrix)+0.75, y=par("usr")[4] + 1.25,
srt = 45, adj = 1, labels = rownames(data_matrix), xpd = TRUE)
# Labels
axis(2,at=1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1)
# Linhas
abline(h = c(1:ncol(data_matrix))+0.5, v = c(1:nrow(data_matrix))+0.5, col = "white", lwd = 2, xpd = F)
# Título
title("Correlação Entre Genes", line = 8, adj = 0)
############# Sumarizando Dados Multivariados em um único Heat Map #############
# Carregando os dados
nba <- read.csv("nba.csv")
head(nba)
# Pacote de cores
library(RColorBrewer)
# Obtendo o nome das linhas --------------- Reshape ----------------------------
rownames(nba) <- nba[,1] #todas as linhas(antes da virgula) e a 1ª col(depois da vírgula)
# Ajustando os dados
data_matrix <- t(scale(data.matrix(nba[,-1]))) # transposta damatriz
head(nba)
# Paleta de cores
pal = brewer.pal(6,"Blues")
# Vetor com o nome das estatísticas ------------ Nomeando as cols --------------
statnames <- c("Games Played", "Minutes Played", "Total Points", "Field Goals Made",
"Field Goals Attempted", "Field Goal Percentage", "Free Throws Made",
"Free Throws Attempted", "Free Throw Percentage", "Three Pointers Made",
"Three Pointers Attempted", "Three Point Percentage", "Offensive Rebounds",
"Defensive Rebounds", "Total Rebounds", "Assists", "Steals", "Blocks", "Turnovers", "Fouls")
# Parâmetros do gráfico (area do plot) -----------------------------------------
par(mar = c(3,14,19,2), oma=c(0.2,0.2,0.2,0.2), mex=0.5)
# Heat map --------------------------------- Plot ------------------------------
image(x = 1:nrow(data_matrix),
y = 1:ncol(data_matrix),
z = data_matrix,
xlab = "",
ylab = "",
col = pal,
axes = FALSE)
# Label no eixo x
text(1:nrow(data_matrix), par("usr")[4] + 1, srt = 45, adj = 0, labels = statnames, xpd = TRUE, cex = 0.85)
# Label no eixo y
axis(side=2, at = 1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1, cex.axis = 0.85)
# Linha divisória
abline(h = c(1:ncol(data_matrix))+0.5, v=c(1:nrow(data_matrix))+0.5, col = "white", lwd = 1, xpd = F)
# Título
text(par("usr")[1]+5, par("usr")[4] + 12, "Performance por Jogo dos 50 Melhores Atletas da NBA", xpd = TRUE, font = 2, cex = 1.5)
install.packages("RColorBrewer")
library(RColorBrewer)
vendas <- read.csv("vendas.csv")
head(vendas)
rownames(vendas) <- vendas[,1]
vendas <- vendas[,-1]
data_matrix <- data.matrix(vendas)
head(vendas)
pal = brewer.pal(7,"YlOrRd")
breaks <- seq(3000,12000,1500)
layout(matrix(data = c(1,2), nrow = 1, ncol = 2), widths = c(8,1), heights = c(1,1))
par(mar = c(5,10,4,2), oma = c(0.2,0.2,0.2,0.2), mex = 0.5)
image(x = 1:nrow(data_matrix), y = 1:ncol(data_matrix),
z = data_matrix,
axes = FALSE,
xlab = "Mês",
ylab = "",
col = pal[1:(length(breaks)-1)],
breaks = breaks,
main = "Heat Map de Vendas")
axis(1, at=1:nrow(data_matrix), labels = rownames(data_matrix), col = "white", las = 1)
axis(2, at=1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1)
# Adiciona linhas divisórias
abline(h=c(1:ncol(data_matrix))+0.5,
v=c(1:nrow(data_matrix))+0.5, col="white",lwd=2,xpd=FALSE)
# Adicionando breaks para usar como esacala ------ Legenda ---------------------
breaks2 <- breaks[-length(breaks)]
# Color Scale (legenda)
par(mar = c(5,1,4,7))
# Adicionando breaks para usar como esacala ------ Legenda ---------------------
breaks2 <- breaks[-length(breaks)]
par(mar = c(5,1,4,7))
# ajuste as margens para que o gráfico e a escala se encaixem no dispositivo. (legenda)
image(x=1, y=0:length(breaks2),z=t(matrix(breaks2))*1.001,
col=pal[1:length(breaks)-1],
axes=FALSE,
breaks = breaks,
xlab = "",
ylab = "",
xaxt = "n")
axis(4, at=0:(length(breaks2)-1), labels = breaks2, col = "white", las = 1)
abline(h = c(1:length(breaks2)), col = "white", lwd = 2, xpd = F)
genes <- read.csv("genes.csv")
head(genes)
rownames(genes) <- genes[,1]
data_matrix <- data.matrix(genes[,-1])
head(genes)
pal = heat.colors(5)
breaks <- seq(0,1,0.2)
# Layout
layout(matrix(data = c(1,2), nrow = 1, ncol = 2), widths = c(8,1), heights = c(1,1))
par(mar = c(3,7,12,2), oma = c(0.2,0.2,0.2,0.2), mex = 0.5)
# Cria o gráfico ------------------------------------plot-----------------------
image(x=1:nrow(data_matrix),y=1:ncol(data_matrix),
z = data_matrix,
xlab = "",
ylab = "",
breaks = breaks,
col = pal,
axes = FALSE)
# Adiciona texto
text(x=1:nrow(data_matrix)+0.75, y=par("usr")[4] + 1.25,
srt = 45, adj = 1, labels = rownames(data_matrix), xpd = TRUE)
# Labels
axis(2,at=1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1)
# Linhas
abline(h = c(1:ncol(data_matrix))+0.5, v = c(1:nrow(data_matrix))+0.5, col = "white", lwd = 2, xpd = F)
# Título
title("Correlação Entre Genes", line = 8, adj = 0)
nba <- read.csv("nba.csv")
head(nba)
# Pacote de cores
library(RColorBrewer)
# Obtendo o nome das linhas --------------- Reshape ----------------------------
rownames(nba) <- nba[,1] #todas as linhas(antes da virgula) e a 1ª col(depois da vírgula)
# Ajustando os dados
data_matrix <- t(scale(data.matrix(nba[,-1]))) # transposta damatriz
head(nba)
pal = brewer.pal(6,"Blues")
statnames <- c("Games Played", "Minutes Played", "Total Points", "Field Goals Made",
"Field Goals Attempted", "Field Goal Percentage", "Free Throws Made",
"Free Throws Attempted", "Free Throw Percentage", "Three Pointers Made",
"Three Pointers Attempted", "Three Point Percentage", "Offensive Rebounds",
"Defensive Rebounds", "Total Rebounds", "Assists", "Steals", "Blocks", "Turnovers", "Fouls")
par(mar = c(3,14,19,2), oma=c(0.2,0.2,0.2,0.2), mex=0.5)
# Heat map --------------------------------- Plot ------------------------------
image(x = 1:nrow(data_matrix),
y = 1:ncol(data_matrix),
z = data_matrix,
xlab = "",
ylab = "",
col = pal,
axes = FALSE)
# Label no eixo x
text(1:nrow(data_matrix), par("usr")[4] + 1, srt = 45, adj = 0, labels = statnames, xpd = TRUE, cex = 0.85)
# Label no eixo y
axis(side=2, at = 1:ncol(data_matrix), labels = colnames(data_matrix), col = "white", las = 1, cex.axis = 0.85)
# Linha divisória
abline(h = c(1:ncol(data_matrix))+0.5, v=c(1:nrow(data_matrix))+0.5, col = "white", lwd = 1, xpd = F)
# Título
text(par("usr")[1]+5, par("usr")[4] + 12, "Performance por Jogo dos 50 Melhores Atletas da NBA", xpd = TRUE, font = 2, cex = 1.5)
# fç + as infos do dataset:
contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
# Criando a área de plotagem vazia ---------------------------------------------
par(las = 1)
plot(0,0,
xlim = c(0,10*nrow(volcano)),
ylim = c(0,10*ncol(volcano)),
type = "n",
xlab = "Metros a Oeste",
ylab = "Metros ao Norte",
main = "Topografia do Vulcão Maunga Whau")
# Ajustando a área de plotagem e alterando a cor de fundo
u <- par("usr")
rect(u[1],u[3],u[2],u[4], col = "lightgreen")
# Criando o gráfico
contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
volcano,
col = "red",
add = TRUE)
# Preenchendo o Countour Plot --------- (filled contour plots) --------- heatmap
filled.contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
color.palette = terrain.colors,
plot.title = title(main = "Topografia do Vulcão Maunga Whau", xlab = "Metros ao Norte", ylab = "Metros a Oeste"),
plot.axes = {axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100))},
key.title = title(main="Altura\n(metros)"),
key.axes = axis(4, seq(90, 190, by = 10)))
# Preenchendo o Countour Plot (filled contour plots) e aumentando o nível de detalhes
filled.contour(x = 10*1:nrow(volcano),
y = 10*1:ncol(volcano),
z = volcano,
color.palette = terrain.colors,
plot.title = title(main = "Topografia do Vulcão Maunga Whau", xlab = "Metros ao Norte", ylab = "Metros a Oeste"),
nlevels = 100,
plot.axes = {axis(1, seq(100, 800, by = 100))
axis(2, seq(100, 600, by = 100))},
key.title = title(main = "Altura\n(metros)"),
key.axes = axis(4, seq(90, 190, by = 10)))
library(rgl)
source("calendarHeat.R")
# Dados
stock.data <- read.csv("google.csv") # series temporais do google
library(chron)
# Cria o calendário ------------- Plot de séries temporais ---------------------
calendarHeat(dates = stock.data$Date, values = stock.data$Adj.Close, varname = "Google Adjusted Close")
calendarHeat(dates = stock.data$Date, values = stock.data$Adj.Close, varname = "Google Adjusted Close")
calendarHeat(dates = stock.data$Date, values = stock.data$Adj.Close, varname = "Google Adjusted Close")
calendarHeat(dates = stock.data$Date, values = stock.data$Adj.Close, varname = "Google Adjusted Close")
library(openair)
calendarPlot(mydata) #
