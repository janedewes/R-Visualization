knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
churn <- read.csv('Telco-Customer-Churn.csv')
str(churn)
sapply(churn, function(x) sum(is.na(x)))
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
min(churn$tenure); max(churn$tenure)
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
numeric.var <- sapply(churn, is.numeric)
corr.matrix <- cor(churn[,numeric.var])
corrplot(corr.matrix, main="\n\nGráfico de Correlação para Variáveis Numéricas", method="number")
churn$TotalCharges <- NULL
p1 <- ggplot(churn, aes(x=gender)) + ggtitle("Gender") + xlab("Gender") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p2 <- ggplot(churn, aes(x=SeniorCitizen)) + ggtitle("Senior Citizen") + xlab("Senior Citizen") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p3 <- ggplot(churn, aes(x=Partner)) + ggtitle("Partner") + xlab("Partner") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p4 <- ggplot(churn, aes(x=Dependents)) + ggtitle("Dependents") + xlab("Dependents") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p1, p2, p3, p4, ncol=2)
p5 <- ggplot(churn, aes(x=PhoneService)) + ggtitle("Phone Service") + xlab("Phone Service") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p6 <- ggplot(churn, aes(x=MultipleLines)) + ggtitle("Multiple Lines") + xlab("Multiple Lines") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p7 <- ggplot(churn, aes(x=InternetService)) + ggtitle("Internet Service") + xlab("Internet Service") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p8 <- ggplot(churn, aes(x=OnlineSecurity)) + ggtitle("Online Security") + xlab("Online Security") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p5, p6, p7, p8, ncol=2)
p9 <- ggplot(churn, aes(x=OnlineBackup)) + ggtitle("Online Backup") + xlab("Online Backup") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p10 <- ggplot(churn, aes(x=DeviceProtection)) + ggtitle("Device Protection") + xlab("Device Protection") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p11 <- ggplot(churn, aes(x=TechSupport)) + ggtitle("Tech Support") + xlab("Tech Support") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p12 <- ggplot(churn, aes(x=StreamingTV)) + ggtitle("Streaming TV") + xlab("Streaming TV") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p9, p10, p11, p12, ncol=2)
p13 <- ggplot(churn, aes(x=StreamingMovies)) + ggtitle("Streaming Movies") + xlab("Streaming Movies") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p14 <- ggplot(churn, aes(x=Contract)) + ggtitle("Contract") + xlab("Contract") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p15 <- ggplot(churn, aes(x=PaperlessBilling)) + ggtitle("Paperless Billing") + xlab("Paperless Billing") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p16 <- ggplot(churn, aes(x=PaymentMethod)) + ggtitle("Payment Method") + xlab("Payment Method") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p17 <- ggplot(churn, aes(x=tenure_group)) + ggtitle("Tenure Group") + xlab("Tenure Group") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p13, p14, p15, p16, p17, ncol=2)
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
dim(training); dim(testing)
LogModel <- glm(Churn ~ .,family=binomial(link="logit"),data=training)
print(summary(LogModel))
anova(LogModel, test="Chisq")
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
print("Confusion Matrix Para Logistic Regression"); table(testing$Churn, fitted.results > 0.5)
exp(cbind(OR=coef(LogModel), confint(LogModel)))
churn <- read.csv('Telco-Customer-Churn.csv')
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
churn$TotalCharges <- NULL
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
tree <- ctree(Churn~Contract+tenure_group+PaperlessBilling, training)
plot(tree, type='simple')
pred_tree <- predict(tree, testing)
print("Confusion Matrix for Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
p1 <- predict(tree, training)
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))
set.seed(2017)
rfModel <- randomForest(Churn ~., data = training)
print(rfModel)
pred_rf <- predict(rfModel, testing)
caret::confusionMatrix(pred_rf, testing$Churn)
plot(rfModel)
t <- tuneRF(training[, -18], training[, 18], stepFactor = 0.5, plot = TRUE, ntreeTry = 200, trace = TRUE, improve = 0.05)
rfModel_new <- randomForest(Churn ~., data = training, ntree = 200, mtry = 2, importance = TRUE, proximity = TRUE)
print(rfModel_new)
pred_rf_new <- predict(rfModel_new, testing)
caret::confusionMatrix(pred_rf_new, testing$Churn)
varImpPlot(rfModel_new, sort=T, n.var = 10, main = 'Top 10 Feature Importance')
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/03-ggplot2")
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/03-ggplot2")
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/03-ggplot2")
getwd()
library(ggplot2)
data(tips, package = 'reshape2')
View(tips)
camada1 <- geom_point(
mapping = aes(x = total_bill, y = tip, color = sex),
data = tips,
size = 3
)
ggplot() + camada1
# Contruindo um modelo de regressão
modelo_base <- lm(tip ~ total_bill, data = tips)
modelo_fit <- data.frame(
total_bill = tips$total_bill,
predict(modelo_base, interval = "confidence")
)
head(modelo_fit)
head(modelo_fit)
camada2 <- geom_line(
mapping = aes(x = total_bill, y = fit),
data = modelo_fit,
color = "darkred"
)
ggplot() + camada1 + camada2
camada3 <- geom_ribbon(
mapping = aes(x = total_bill, ymin = lwr, ymax = upr),
data = modelo_fit,
alpha = 0.3
)
ggplot() + camada1 + camada2 + camada3
ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
myplot <- ggplot(tips, aes(x = total_bill, y = tip)) +
geom_point(aes(color = sex)) +
geom_smooth(method = 'lm')
class(myplot)
print(myplot)
bikes <- read.csv("bikes.csv")
head(bikes)
str(bikes)
bikes$season <- factor(bikes$season, levels = c(1,2,3,4), labels = c("Primavera", "Verão", "Outono", "Inverno"))
attach(bikes)
head(bikes$season)
par(mfrow = c(2,2))
primavera <- subset(bikes, season == "Primavera")$cnt #cnt = contagem
verao <- subset(bikes, season == "Verão")$cnt
outono <- subset(bikes, season == "Outono")$cnt
inverno <- subset(bikes, season == "Inverno")$cnt
# Desenhando os gráficos
hist(primavera, prob = TRUE, xlab = "Aluguel Diário na Primavera", main = "")
lines(density(primavera))
hist(verao, prob = TRUE, xlab = "Aluguel Diário no Verão", main = "")
lines(density(verao))
hist(outono, prob = TRUE, xlab = "Aluguel Diário no Outono", main = "")
lines(density(outono))
hist(inverno, prob = TRUE, xlab = "Aluguel Diário no Inverno", main = "")
lines(density(inverno))
str(bikes)
qplot(cnt, data = bikes) + facet_wrap(~ season, nrow = 2) + geom_histogram(fill = "blue")
qplot(season, cnt, data = bikes, geom = c("boxplot"), fill = season)
qplot(cnt, data = bikes, fill = season)
qplot(season, cnt, data = bikes, geom = c("boxplot"), fill = season)
ggplot(bikes, aes(x = season, y = cnt)) + geom_boxplot()
bikes <- read.csv("bikes.csv")
bikes$season <- factor(bikes$season, levels = c(1,2,3,4), labels = c("Primavera", "Verão", "Outono", "Inverno"))
bikes$weathersit <- factor(bikes$weathersit, levels = c(1,2,3), labels = c("Sol", "Nublado", "Chuva"))
bikes$windspeed.fac <- cut(bikes$windspeed, breaks = 3, labels = c("Baixo", "Médio", "Alto"))
bikes$weekday <- factor(bikes$weekday, levels = c(0:6), labels = c("Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"))
attach(bikes)
bikes$season <- factor(bikes$season, levels = c(1,2,3,4), labels = c("Primavera", "Verão", "Outono", "Inverno"))
bikes$weathersit <- factor(bikes$weathersit, levels = c(1,2,3), labels = c("Sol", "Nublado", "Chuva"))
bikes$windspeed.fac <- cut(bikes$windspeed, breaks = 3, labels = c("Baixo", "Médio", "Alto"))
bikes$weekday <- factor(bikes$weekday, levels = c(0:6), labels = c("Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"))
attach(bikes)
str(bikes)
bikes$windspeed.fac <- cut(bikes$windspeed, breaks = 3, labels = c("Baixo", "Médio", "Alto"))
str(bikes)
plot <- ggplot(bikes, aes(temp, cnt)) # col temp e cnt
# Adicionando camadas ao plot + (add ao plot acima, o windspeed) + (weekday)
plot + geom_point(size = 3,
aes(color = factor(windspeed.fac))) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
facet_grid(weekday ~ season) +
theme(legend.position = "bottom")
plot <- ggplot(bikes, aes(temp, cnt))
plot + geom_point(size = 3,
aes(color = factor(windspeed.fac))) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
facet_grid(weekday ~ season) +
theme(legend.position = "bottom")
plot <- ggplot(bikes, aes(temp, cnt)) # col temp e cnt
plot + geom_point(size = 3,
aes(color = factor(windspeed.fac))) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
facet_grid(weekday ~ season) +
theme(legend.position = "bottom")
# Adicionando camadas ao plot + (add ao plot acima, o windspeed) + (weekday)
plot + geom_point(size = 3,
aes(color = factor(windspeed.fac))) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
facet_grid(weekday ~ season) +
theme(legend.position = "bottom")
# Plots multivariados --------------------insfos de diversas variaveis ---------
bikes <- read.csv("bikes.csv")
bikes$season <- factor(bikes$season, levels = c(1,2,3,4), labels = c("Primavera", "Verão", "Outono", "Inverno"))
bikes$weathersit <- factor(bikes$weathersit, levels = c(1,2,3), labels = c("Sol", "Nublado", "Chuva"))
bikes$windspeed.fac <- cut(bikes$windspeed, breaks = 3, labels = c("Baixo", "Médio", "Alto"))
bikes$weekday <- factor(bikes$weekday, levels = c(0:6), labels = c("Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"))
attach(bikes)
str(bikes)
plot <- ggplot(bikes, aes(temp, cnt))
plot + geom_point(size = 3,
aes(color = factor(windspeed.fac))) +
geom_smooth(method = "lm", se = FALSE, col = "red") +
facet_grid(weekday ~ season) +
theme(legend.position = "bottom")
data = data.frame(cond = rep(c("Obs 1", "Obs 2"),
each = 10), var1 = 1:100 + rnorm(100, sd = 9),
var2 = 1:100 + rnorm(100,sd = 16))
head(data)
head(data)
ggplot(data, aes(x = var1, y = var2)) +
geom_point(shape = 1) +
geom_smooth(method = lm , color = "red", se = FALSE)
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(x = mtcars$wt,
y = mtcars$disp,
z = mtcars$mpg)
par(mfrow = c(1,1))
par(mfrow = c(1,1))
scatterplot3d(x = mtcars$wt,
y = mtcars$disp,
z = mtcars$mpg)
scatterplot3d(mtcars$wt, mtcars$disp, mtcars$mpg,
pch=16, highlight.3d = TRUE, angle = 20,
xlab = "Peso", ylab = "Deslocamento", zlab = "Consumo de Combustível(mpg)",
type = "h",
main = "Relacionamento Entre Características de Automóveis")
data = data.frame(grupo = c("A ","B ","C ","D ") ,
valor = c(33,62,56,67) ,
num_obs = c(100,500,459,342))
data$right = cumsum(data$num_obs) + 30 * c(0:(nrow(data)-1))
data$left = data$right - data$num_obs
ggplot(data, aes(ymin = 0)) +
geom_rect(aes(xmin = left, xmax = right,
ymax = valor, colour = grupo, fill = grupo)) +
xlab("Número de obs") + ylab("Valor")
ggplot(diamonds, aes(carat)) +
geom_histogram()
ggplot(diamonds, aes(carat)) +
geom_histogram(binwidth = 0.01)
ggplot(diamonds, aes(carat)) +
geom_histogram(bins = 200)
ggplot(diamonds, aes(price, fill = cut)) +
geom_histogram(binwidth = 500)
ggplot(diamonds, aes(price, colour = cut)) +
geom_freqpoly(binwidth = 500)
ggplot(diamonds, aes(price, ..density.., colour = cut)) +
geom_freqpoly(binwidth = 500)
head(mtcars)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + geom_point()
ggplot(data = mtcars,
aes(x = disp, y = mpg,
colour = as.factor(am))) + geom_point()
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl)) + geom_point()
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
ggplot(mtcars, aes(x = disp, y = mpg, colour = cyl, size = wt)) + geom_point()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg)) + geom_boxplot()
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
ggplot(mtcars, aes(x = mpg), binwidth = 30) + geom_histogram()
ggplot(mtcars, aes(x = as.factor(cyl))) + geom_bar()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
colour = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars, aes(x = as.factor(cyl), y = mpg,
fill = as.factor(cyl))) + geom_boxplot()
ggplot(mtcars,
aes(x = as.factor(cyl), y = mpg)) +
geom_boxplot(color = "blue", fill = "seagreen4")
ggplot(mtcars, aes(x = mpg)) +
geom_histogram() +
xlab("Milhas por galão") + ylab("Frequência")
ggplot(mtcars, aes(x = mpg)) + geom_histogram() + xlab("Milhas por galão") + ylab("Frequência") +
xlim(c(0, 40)) +
ylim(c(0,8))
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
labs(fill = "cyl") +
theme(legend.position="top")
ggplot(mtcars, aes(x = as.factor(cyl), fill = as.factor(cyl))) +
geom_bar() +
guides(fill=FALSE)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(am~.)
ggplot(mtcars, aes(x = mpg, y = disp, colour = as.factor(cyl))) +
geom_point() +
facet_grid(.~am)
library(gridExtra)
library(ggplot2)
data(diamonds)
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma área
grid.arrange(plot1, plot2, ncol = 1)
library(reshape2)
library(plotly)
sp <- ggplot(tips, aes(x=total_bill, y=tip/total_bill)) + geom_point(shape=1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_grid(. ~ sex)
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
data(diamonds)
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
grid.arrange(plot1, plot2, ncol = 1)
