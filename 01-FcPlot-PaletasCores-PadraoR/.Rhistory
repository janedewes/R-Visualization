knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(corrplot)
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(caret)
library(MASS)
library(randomForest)
library(party)
churn <- read.csv('Telco-Customer-Churn.csv')
str(churn)
sapply(churn, function(x) sum(is.na(x)))
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
min(churn$tenure); max(churn$tenure)
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
numeric.var <- sapply(churn, is.numeric)
corr.matrix <- cor(churn[,numeric.var])
corrplot(corr.matrix, main="\n\nGráfico de Correlação para Variáveis Numéricas", method="number")
churn$TotalCharges <- NULL
p1 <- ggplot(churn, aes(x=gender)) + ggtitle("Gender") + xlab("Gender") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p2 <- ggplot(churn, aes(x=SeniorCitizen)) + ggtitle("Senior Citizen") + xlab("Senior Citizen") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p3 <- ggplot(churn, aes(x=Partner)) + ggtitle("Partner") + xlab("Partner") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p4 <- ggplot(churn, aes(x=Dependents)) + ggtitle("Dependents") + xlab("Dependents") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p1, p2, p3, p4, ncol=2)
p5 <- ggplot(churn, aes(x=PhoneService)) + ggtitle("Phone Service") + xlab("Phone Service") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p6 <- ggplot(churn, aes(x=MultipleLines)) + ggtitle("Multiple Lines") + xlab("Multiple Lines") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p7 <- ggplot(churn, aes(x=InternetService)) + ggtitle("Internet Service") + xlab("Internet Service") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p8 <- ggplot(churn, aes(x=OnlineSecurity)) + ggtitle("Online Security") + xlab("Online Security") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p5, p6, p7, p8, ncol=2)
p9 <- ggplot(churn, aes(x=OnlineBackup)) + ggtitle("Online Backup") + xlab("Online Backup") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p10 <- ggplot(churn, aes(x=DeviceProtection)) + ggtitle("Device Protection") + xlab("Device Protection") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p11 <- ggplot(churn, aes(x=TechSupport)) + ggtitle("Tech Support") + xlab("Tech Support") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p12 <- ggplot(churn, aes(x=StreamingTV)) + ggtitle("Streaming TV") + xlab("Streaming TV") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p9, p10, p11, p12, ncol=2)
p13 <- ggplot(churn, aes(x=StreamingMovies)) + ggtitle("Streaming Movies") + xlab("Streaming Movies") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p14 <- ggplot(churn, aes(x=Contract)) + ggtitle("Contract") + xlab("Contract") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p15 <- ggplot(churn, aes(x=PaperlessBilling)) + ggtitle("Paperless Billing") + xlab("Paperless Billing") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p16 <- ggplot(churn, aes(x=PaymentMethod)) + ggtitle("Payment Method") + xlab("Payment Method") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
p17 <- ggplot(churn, aes(x=tenure_group)) + ggtitle("Tenure Group") + xlab("Tenure Group") +
geom_bar(aes(y = 100*(..count..)/sum(..count..)), width = 0.5) + ylab("Percentual") + coord_flip() + theme_minimal()
grid.arrange(p13, p14, p15, p16, p17, ncol=2)
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
dim(training); dim(testing)
LogModel <- glm(Churn ~ .,family=binomial(link="logit"),data=training)
print(summary(LogModel))
anova(LogModel, test="Chisq")
testing$Churn <- as.character(testing$Churn)
testing$Churn[testing$Churn=="No"] <- "0"
testing$Churn[testing$Churn=="Yes"] <- "1"
fitted.results <- predict(LogModel,newdata=testing,type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != testing$Churn)
print(paste('Logistic Regression Accuracy',1-misClasificError))
print("Confusion Matrix Para Logistic Regression"); table(testing$Churn, fitted.results > 0.5)
exp(cbind(OR=coef(LogModel), confint(LogModel)))
churn <- read.csv('Telco-Customer-Churn.csv')
churn <- churn[complete.cases(churn), ]
cols_recode1 <- c(10:15)
for(i in 1:ncol(churn[,cols_recode1])) {
churn[,cols_recode1][,i] <- as.factor(mapvalues
(churn[,cols_recode1][,i], from =c("No internet service"),to=c("No")))
}
churn$MultipleLines <- as.factor(mapvalues(churn$MultipleLines,
from=c("No phone service"),
to=c("No")))
group_tenure <- function(tenure){
if (tenure >= 0 & tenure <= 12){
return('0-12 Month')
}else if(tenure > 12 & tenure <= 24){
return('12-24 Month')
}else if (tenure > 24 & tenure <= 48){
return('24-48 Month')
}else if (tenure > 48 & tenure <=60){
return('48-60 Month')
}else if (tenure > 60){
return('> 60 Month')
}
}
churn$tenure_group <- sapply(churn$tenure,group_tenure)
churn$tenure_group <- as.factor(churn$tenure_group)
churn$SeniorCitizen <- as.factor(mapvalues(churn$SeniorCitizen,
from=c("0","1"),
to=c("No", "Yes")))
churn$customerID <- NULL
churn$tenure <- NULL
churn$TotalCharges <- NULL
intrain<- createDataPartition(churn$Churn,p=0.7,list=FALSE)
set.seed(2017)
training<- churn[intrain,]
testing<- churn[-intrain,]
tree <- ctree(Churn~Contract+tenure_group+PaperlessBilling, training)
plot(tree, type='simple')
pred_tree <- predict(tree, testing)
print("Confusion Matrix for Decision Tree"); table(Predicted = pred_tree, Actual = testing$Churn)
p1 <- predict(tree, training)
tab1 <- table(Predicted = p1, Actual = training$Churn)
tab2 <- table(Predicted = pred_tree, Actual = testing$Churn)
print(paste('Decision Tree Accuracy',sum(diag(tab2))/sum(tab2)))
set.seed(2017)
rfModel <- randomForest(Churn ~., data = training)
print(rfModel)
pred_rf <- predict(rfModel, testing)
caret::confusionMatrix(pred_rf, testing$Churn)
plot(rfModel)
t <- tuneRF(training[, -18], training[, 18], stepFactor = 0.5, plot = TRUE, ntreeTry = 200, trace = TRUE, improve = 0.05)
rfModel_new <- randomForest(Churn ~., data = training, ntree = 200, mtry = 2, importance = TRUE, proximity = TRUE)
print(rfModel_new)
pred_rf_new <- predict(rfModel_new, testing)
caret::confusionMatrix(pred_rf_new, testing$Churn)
varImpPlot(rfModel_new, sort=T, n.var = 10, main = 'Top 10 Feature Importance')
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/02-Graficos-PadroesR")
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/02-Graficos-PadroesR")
getwd()
auto <- read.csv("carros.csv")
View(auto)
str(auto)
str(auto)
auto$cylinders <- factor(auto$cylinders,
levels = c(3,4,5,6,8),
labels = c("3cyl", "4cyl", "5cyl", "6cyl", "8cyl"))
attach(auto)
str(auto)
hist(acceleration)
hist(acceleration, col = "blue", xlab = "acceleration",
main = "Histograma de Aceleração", breaks = 15)
hist(mpg, col = rainbow(12))
hist(mpg, prob = TRUE)
lines(density(mpg))
boxplot(mpg, xlab = "Milhas por Galão")
boxplot(mpg ~ model_year, xlab = "Milhas por Galão")
plot(mpg ~ horsepower)
pairs(~mpg+displacement+horsepower+weight)
plot(mpg ~ horsepower)
reg <- lm(mpg ~ horsepower)
abline(reg)
plot(mpg ~ horsepower, type = "n")
with(subset(auto, cylinders == "8cyl"), points(horsepower, mpg, col = "blue"))
with(subset(auto, cylinders == "6cyl"),  points(horsepower, mpg, col = "red"))
with(subset(auto, cylinders == "5cyl"),  points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders == "5cyl"),  points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders == "4cyl"),  points(horsepower, mpg, col = "green"))
with(subset(auto, cylinders == "3cyl"),  points(horsepower, mpg))
with(subset(auto, cylinders == "3cyl"),  points(horsepower, mpg))
str(auto)
hist(acceleration)
hist(acceleration, col = "blue", xlab = "acceleration",
main = "Histograma de Aceleração", breaks = 15)
hist(mpg, col = rainbow(12))
hist(mpg, prob = TRUE)
lines(density(mpg))
boxplot(mpg, xlab = "Milhas por Galão")
boxplot(mpg ~ model_year, xlab = "Milhas por Galão")
plot(mpg ~ horsepower)
pairs(~mpg+displacement+horsepower+weight)
plot(mpg ~ horsepower)
reg <- lm(mpg ~ horsepower)
abline(reg)
plot(mpg ~ horsepower, type = "n")
with(subset(auto, cylinders == "8cyl"), points(horsepower, mpg, col = "blue"))
with(subset(auto, cylinders == "6cyl"),  points(horsepower, mpg, col = "red"))
with(subset(auto, cylinders == "5cyl"),  points(horsepower, mpg, col = "yellow"))
with(subset(auto, cylinders == "4cyl"),  points(horsepower, mpg, col = "green"))
with(subset(auto, cylinders == "3cyl"),  points(horsepower, mpg))
# Post Script
postscript(file = "auto-scatter.ps")
boxplot(mpg)
dev.off()
pdf(file = "auto-scatter.pdf")
boxplot(mpg)
dev.off()
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/01-FcPlot-PaletasCores-PadraoR/plots")
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/01-FcPlot-PaletasCores-PadraoR")
# Def dir
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/01-FcPlot-PaletasCores-PadraoR")
getwd()
x <- rnorm(1000)
plot(x)
plot(x, col = "red"
plot(x, col = "red")
plot(x, col = "red") #cor
vendas <- read.csv("vendas.csv", header = TRUE)
plot(vendas$units ~ as.Date(vendas$date, "%d/%m/%y"), type = "l",  col = "blue")
plot(vendas$units ~ as.Date(vendas$date, "%d/%m/%y"), type = "b",  col = "darkblue") # type = "b" ambos
plot(vendas$units ~ as.Date(vendas$date, "%d/%m/%y"), type = "h",  col = "red")
par(bg = "gray")
plot(x)
plot(x)
x <- rnorm(100)
plot(x, type = "n")
x <- par("usr")
rect(x[1],x[3],x[2],x[4], col = "lightgray")
points(x)
# Gerando contraste entre a área de desenho e a área do gráfico ----------------
x <- rnorm(100)
points(x)
plot(x,  main = "Título do Plot",
col.axis = "blue",
col.lab = "red",
col.main = "darkblue",
xlab = "Mês", ylab = "Vendas")
par(col.axis = "black", col.lab = "#444444", col.main = "darkblue")
plot(x)
par(col.axis = "black", col.lab = "#444444", col.main = "darkblue")
plot(x)
par(col.axis = "black", col.lab = "#444444", col.main = "darkblue")
plot(x, col.axis = "blue", col.lab = "red", col.main = "darkblue", xlab = "Mês", ylab = "Vendas")
title("Vendas de 2010", col.main = "blue")
palette(c("red", "blue", "green", "orange"))
palette("default")
library(RColorBrewer)
palette(c("red", "blue", "green", "orange"))
palette("default")
display.brewer.all()
brewer.pal(7, "YlOrRd")
display.brewer.pal(7, "YlOrRd")
palette(brewer.pal(7, "YlOrRd"))
pal1<- brewer.pal(7, "YlOrRd")
par(family = "serif", font = 2)
names(pdfFonts())
chuvas <- read.csv("chuvas.csv")
View(chuvas)
par(bg = "white")
plot(chuvas$Tokyo, ylim = c(0,250),
main = "Chuva Média por Mês",
xlab = "Mês", ylab = "Chuvas(mm)", pch = 1)
points(chuvas$NewYork, pch = 2)
points(chuvas$London, pch = 3)
points(chuvas$Berlin, pch = 4)
legend("top", legend = c("Tokyo", "New York", "London", "Berlin"),
ncol = 4, cex = 0.8, bty = "n", pch = 1:4)
plot(chuvas$Tokyo,
ylim = c(0,250),
main = "Chuva Média por Mês",
xlab = "Mês",
ylab = "Chuvas(mm)",
type = "l",
lty = 1,
lwd = 2)
# Acrescentando linhas ---------------------------------------------------------
lines(chuvas$NewYork, lty = 2, lwd = 2)
lines(chuvas$London, lty = 3, lwd = 2)
lines(chuvas$Berlin, lty = 4, lwd = 2)
legend("top", legend = c("Tokyo", "New York", "London", "Berlin"),
ncol = 4, cex = 0.8, bty = "n", lty = 1:4, lwd = 2)
x <- rnorm(100)
par(bty = "l")
plot(x)
par(oma = c(1,1,1,1))
plot(x, bty = "l")
box(which = "figure")
# Def dir
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/01-FcPlot-PaletasCores-PadraoR")
getwd()
setwd("C:/Users/paloma/Desktop/Dashboards/R-Visualization/01-FcPlot-PaletasCores-PadraoR")
